/**
 * Replaces a link or a list of links with a new one. A selection limits the scope.
 * @param {(string|string[])} oldLinks - Link name, or a list of link names to be replaced
 * @param {string} newLink - New link name (for same folder), or full link path
 */
function Relink(oldLinks, newLink) {
	var sel = doc.selection;
	var link, links = doc.links.everyItem().getElements();

	// Check if document has at least one of oldLinks
	if (oldLinks.constructor.name !== "Array") oldLinks = Array(oldLinks);
	for (var i = 0, n = oldLinks.length, isFound = false; i < n; i++)
		if (IsIn(oldLinks[i], links)) { isFound = true; break };
	if (!isFound) return false;

	// Check if newLink is valid
	newLink = /\//g.test(newLink) ? newLink : doc.filePath + "/Links/" + newLink;
	if (!File(newLink).exists) { errors.push("'" + newLink + "' not found."); return false };

	while (link = links.shift()) {
		if (sel.length > 0 && !IsIn(link.parent.parent, sel)) { continue } // Skip (not selected)
		else if (!IsIn(link.name, oldLinks)) { continue }; // Skip (no match)
		if (File(link.filePath).fullName === File(newLink).fullName) { continue }; // Skip (self)
		link.relink(File(newLink));
	};
	return true;

	function IsIn(item, array) {
		for (var i = 0, n = array.length; i < n; i++) {
			if (item.constructor.name == "String") {
				if ((array[i].constructor.name == "Link" ? array[i].name : array[i])
					.lastIndexOf(item) != -1) return true;
			} else if (item == array[i]) return true;
		};
		return false;
	};
};
