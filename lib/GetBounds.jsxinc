/*
	GetBounds 22.2.13
	(c) 2021-2022 Paul Chiorean (jpeg@basement.ro)

	Returns an object containing the geometric bounds of the given page, its parent spread, and miscellaneous
	page boxes, using the current measurement units:

	{
		page: {
			size:    [ top, left, bottom, right ],
			margins: [ t, l, b, r ],
			visible: [ t, l, b, r ],
			bleed:   [ t, l, b, r ]
		},
		spread: {
			size:    [ t, l, b, r ],
			margins: [ t, l, b, r ],
			visible: [ t, l, b, r ],
			bleed:   [ t, l, b, r ]
		}
	};

	Note: 'Visible area' is an area marked by one or more frames named `<visible area>` or labeled `visible area`.
	If margins or visible area are undefined, they fallback to page/spread size.

	Examples:

	var pageSize = getBounds(activePage).page.size;           // [ 0,0,297,210 ]
	var spreadMargins = getBounds(activePage).spread.margins; // [ 20,20,277,400 ] (20 mm margins)

	var BOUNDS = getBounds(activePage);
	BOUNDS.page.size;      // [ 0,0,297,210 ]
	BOUNDS.spread.margins; // [ 20,20,277,400 ] (20 mm margins)

	var BOUNDS = getBounds(page);
	var b = {
		size:   BOUNDS[SCOPE].size,
		target: BOUNDS[SCOPE][TARGET],
		vis:    BOUNDS[SCOPE].visible
	};

	Released under MIT License:
	https://choosealicense.com/licenses/mit/

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

function getBounds(page) {
	var PSO = PageSideOptions;
	var visAreaRE = /^<?(visible|safe) area>?$/i;
	var fPg = page.parent.pages.firstItem();
	var lPg = page.parent.pages.lastItem();
	var bleed = {
		top:    page.parent.parent.documentPreferences.properties.documentBleedTopOffset,
		left:   page.parent.parent.documentPreferences.properties.documentBleedInsideOrLeftOffset,
		bottom: page.parent.parent.documentPreferences.properties.documentBleedBottomOffset,
		right:  page.parent.parent.documentPreferences.properties.documentBleedOutsideOrRightOffset
	};
	var margins = {
		top:    page.marginPreferences.top,
		left:   page.marginPreferences.left,
		bottom: page.marginPreferences.bottom,
		right:  page.marginPreferences.right
	};

	return {
		page: {
			size: page.bounds,
			margins: [
				page.bounds[0] + margins.top,
				(page.side === PSO.LEFT_HAND) ? page.bounds[1] + margins.right : page.bounds[1] + margins.left,
				page.bounds[2] - margins.bottom,
				(page.side === PSO.LEFT_HAND) ? page.bounds[3] - margins.left : page.bounds[3] - margins.right
			],
			visible: (function () {
				var frame, i, n;
				var frames = page.pageItems.everyItem().getElements();
				var bounds = [];
				var v = [];
				while ((frame = frames.shift()))
					if (visAreaRE.test(frame.label) || visAreaRE.test(frame.name)) v.push(frame);
				if (v.length > 0) { // Found visible area frame(s)
					bounds = v[0].geometricBounds;
					for (i = 1, n = v.length; i < n; i++) {
						bounds[0] = Math.min(v[i].geometricBounds[0], bounds[0]);
						bounds[1] = Math.min(v[i].geometricBounds[1], bounds[1]);
						bounds[2] = Math.max(v[i].geometricBounds[2], bounds[2]);
						bounds[3] = Math.max(v[i].geometricBounds[3], bounds[3]);
					}
					bounds = [ // Intersect with page bounds
						Math.max(bounds[0], page.bounds[0]),
						Math.max(bounds[1], page.bounds[1]),
						Math.min(bounds[2], page.bounds[2]),
						Math.min(bounds[3], page.bounds[3])
					];
				} else { bounds = page.bounds; } // Fallback to page bounds
				return bounds;
			}()),
			bleed: [
				page.bounds[0] - bleed.top,
				page.bounds[1] - ((page === fPg) ?
					((fPg.side === PSO.LEFT_HAND) ? bleed.right : bleed.left) : 0),
				page.bounds[2] + bleed.bottom,
				page.bounds[3] + ((fPg === lPg) ?
					((fPg.side === PSO.LEFT_HAND) ? bleed.left : bleed.right) : (page === lPg ? bleed.right : 0))
			]
		},
		spread: {
			size: [ fPg.bounds[0], fPg.bounds[1], lPg.bounds[2], lPg.bounds[3] ],
			margins: (function () {
				var fm, lm, m, i, n;
				var p = page.parent.pages;
				var bounds = [];
				for (i = 0, n = p.length; i < n; i++) {
					m = p[i].marginPreferences;
					if (m.top + m.left + m.bottom + m.right > 0) { fm = p[i]; break; }
				}
				for (i = p.length - 1; i >= 0 ; i--) {
					m = p[i].marginPreferences;
					if (m.top + m.left + m.bottom + m.right > 0) { lm = p[i]; break; }
				}
				if (!fm && !lm) {
					bounds = [ fPg.bounds[0], fPg.bounds[1], lPg.bounds[2], lPg.bounds[3] ];
				} else {
					bounds = [
						Math.min(fm.bounds[0] + fm.marginPreferences.top,
							lm.bounds[0] + lm.marginPreferences.top),
						fm.bounds[1] + ((fm.side === PSO.LEFT_HAND) ?
							fm.marginPreferences.right : fm.marginPreferences.left),
						Math.max(lm.bounds[2] - lm.marginPreferences.bottom,
							fm.bounds[2] - fm.marginPreferences.bottom),
						lm.bounds[3] - ((fm === lm) ?
							((fm.side === PSO.LEFT_HAND) ? fm.marginPreferences.left : fm.marginPreferences.right) :
							lm.marginPreferences.right)
					];
				}
				return bounds;
			}()),
			visible: (function () {
				var frame, i, n;
				var frames = page.parent.pageItems.everyItem().getElements();
				var bounds = [];
				var v = [];
				while ((frame = frames.shift()))
					if (visAreaRE.test(frame.label) || visAreaRE.test(frame.name)) v.push(frame);
				if (v.length > 0) { // Found visible area frame(s)
					bounds = v[0].geometricBounds;
					for (i = 1, n = v.length; i < n; i++) {
						bounds[0] = Math.min(v[i].geometricBounds[0], bounds[0]);
						bounds[1] = Math.min(v[i].geometricBounds[1], bounds[1]);
						bounds[2] = Math.max(v[i].geometricBounds[2], bounds[2]);
						bounds[3] = Math.max(v[i].geometricBounds[3], bounds[3]);
					}
				} else { // Fallback to spread bounds
					bounds = [ fPg.bounds[0], fPg.bounds[1], lPg.bounds[2], lPg.bounds[3] ];
				}
				return bounds;
			}()),
			bleed: [
				fPg.bounds[0] - bleed.top,
				fPg.bounds[1] - ((fPg.side === PSO.LEFT_HAND) ? bleed.right : bleed.left),
				lPg.bounds[2] + bleed.bottom,
				lPg.bounds[3] + ((fPg === lPg) ?
					((fPg.side === PSO.LEFT_HAND) ? bleed.left : bleed.right) :
					bleed.right)
			]
		}
	};
}
