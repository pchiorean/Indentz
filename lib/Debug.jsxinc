// Appends in a file on the desktop a debugging line "TIME [TYPE] [<CONTEXT>] MESSAGE", where TIME is autogenerated,
// TYPE and CONTEXT are optional arguments and MESSAGE is a comma-separated list of message parts.
// 
// 1st arg: Empty: new line; '+': append to previous line; 'W'|'E'|'I'|' ': type (warning, error, info) (optional);
// 2nd arg: A string enclosed in '[]' or '<>': context (optional);
// 3rd arg: A comma-separated list of message parts.

function dbg() {
	var script = (function() { try { return app.activeScript } catch(e) { return new File(e.fileName) } })();
	var debugFile = File(Folder.desktop + "/" + script.name.substr(0, script.name.lastIndexOf(".")) + ".log");
	debugFile.open("a");

	var t = new Date(),
		now = t.getFullYear()    + '-' +
		  pad(t.getMonth()+1, 2) + '-' +
		  pad(t.getDate(),    2) + ' ' +
		  pad(t.getHours(),   2) + ':' +
		  pad(t.getMinutes(), 2) + ':' +
		  pad(t.getSeconds(), 2) + '.' +
		  pad(t.getMilliseconds(), 3) + " ",
		args = [].slice.call(arguments);
		separator = " | ";

	debugFile.write(parse(args));
	debugFile.close();

	function parse(args) {
		if (args.length == 0) return debugFile.length == 0 ? now + "Log created" : "\n";
		if (args[0] == "+") return args.shift(), separator + args.join(separator);

		var type = context = "";
		if (args[0].length == 1) {
			type = args.shift();
			switch(type.toLowerCase()) {
				case "w": type = trunc("[WARNING]", 9) + " "; break;
				case "e": type = trunc("[ERROR]",   9) + " "; break;
				case "i": type = trunc("[INFO]",    9) + " "; break;
				case "m": type = trunc("[MARK]",    9) + " "; break;
				case " ": type = "          "; break;
			};
		};
		if (!args[0]) args.shift();
		if (/[\<\>\[\]]/g.test(args[0])) {
			context = args.shift();
			context = "[" + context.substr(1, context.length-2) + "] ";
		};
		if (!args[0]) args.shift();
		return "\n" + now + type + context + args.join(separator);
	};

	function pad  (number, chars) { return ("0000000000000000" + number.toString()).slice(-chars) };
	function trunc(string, chars) { return ("                " + string.substr(0, chars)).slice(-chars) };
};
