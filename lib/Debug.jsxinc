/*
	Debug 1.0 (2021-09-12)
	(c) 2020-2021 Paul Chiorean (jpeg@basement.ro)

	Appends a debugging line to a file saved on the desktop (e.g. script-name.log):

	2021-09-11 12:25:29.611 Type [Context]: Message part1 | part2 | part3
	----------------------- ---- ---------- -----------------------------
	Arguments:
	1. <Type> (optional):
		- `+`: appends the message to the previous line;
		- `I|W|E|F|M|N|T| `: `[INFO]`|`[WARN]`|`[ERR]`|`[FAIL]`|`[MARK]`|`[NOTE]`|`[TODO]`|`      `.
	2. <Context> (optional): a string enclosed in `< >`.
	3. <Message>: a comma-separated list of message parts (`part1`, `part2`, `part3`, ...).

	If no arguments are given, it just appends an empty line.

	Released under MIT License:
	https://choosealicense.com/licenses/mit/
*/

/* eslint-disable no-unused-vars, max-statements-per-line */

function dbg(/*?t,*/ /*?<context>,*/ /*message*/) {
	var script = (function () { try { return app.activeScript; } catch (e) { return new File(e.fileName); } }());
	var debugFile = File(Folder.desktop + '/' + script.name.slice(0, script.name.lastIndexOf('.')) + '.log');
	var t = new Date();
	var now = t.getFullYear()       + '-' +
		pad(t.getMonth() + 1,    2, '0') + '-' +
		pad(t.getDate(),         2, '0') + ' ' +
		pad(t.getHours(),        2, '0') + ':' +
		pad(t.getMinutes(),      2, '0') + ':' +
		pad(t.getSeconds(),      2, '0') + '.' +
		pad(t.getMilliseconds(), 3, '0') + ' ';

	debugFile.open('a');
	debugFile.encoding = 'UTF-8';
	debugFile.write(parseArgs([].slice.call(arguments)));
	debugFile.close();

	function parseArgs(args) {
		var type = '';
		var context = '';
		var separator = ' | ';

		if (args.length === 0) return (debugFile.length === 0 ? (now + 'Log created') : '\n');

		switch (args[0].toString().toLowerCase()) {
			case '+': return (args.shift(), separator + args.join(separator));
			case 'i': type = '[INFO] '; break;
			case 'w': type = '[WARN] '; break;
			case 'e': type = ' [ERR] '; break;
			case 'f': type = '[FAIL] '; break;
			case 'm': type = '[MARK] '; break;
			case 'n': type = '[NOTE] '; break;
			case 't': type = '[TODO] '; break;
			case ' ': type = '       '; break;
			case '' : type = '       '; break;
		}
		if (type) args.shift();

		if (/^<.+>$/g.test(args[0])) {
			context = '[' + args[0].toString().slice(1, args[0].length - 1) + ']: ';
			args.shift();
		}
		return ('\n' + now + type + context + args.join(separator));
	}

	function pad(string, /*number*/padLength, /*string*/padChar) {
		if (string.toString().length === padLength) return string;
		padChar = padChar || ' ';
		string = string.toString();
		while (string.length < padLength) string = padChar.toString() + string;
		return string.slice(0, padLength);
	}
}
