/*
	FitTo 21.11.4
	(c) 2020-2021 Paul Chiorean (jpeg@basement.ro)

	Reframes the given items to the page/spread's size/margins/visible area/bleed: the edges of an item or
	clipping frame that cross the target will be reduced; ones that touch it or are very close (1% snap zone)
	will be extended. Rectangular frames and orthogonal lines are directly resized; rotated objects, ovals,
	groups, etc. are inserted into a clipping frame that is resized.

	It's called internally by the other 'fitTo' scripts.

	Parameters │ Type             │ Default │ Description
	───────────┼──────────────────┼─────────┼────────────────────────────────────────────────────────────────────────
	items      │ `pageItem` or [] │         │ A page item, or an array of page items to be reframed.
	[scope]    │ `string`         │ `page`  │ `page` or `spread`.
	[target]   │ `string`         │ `size`  │ `size`, `margins`, `visible` or `bleed`.
	[forced]   │ `boolean`        │ `false` │ When `true` it just reframes the object without any checks. (Optional.)

	Note: 'Visible area' is an area marked by one or more frames named `<visible area>` or labeled `visible area`.

	Examples:

	fitTo(doc.selection, 'page', 'bleed');

	app.doScript(
	    "fitTo(doc.selection, 'page', 'bleed')",
	    ScriptLanguage.JAVASCRIPT, undefined,
	    UndoModes.ENTIRE_SCRIPT, 'Fit to page bleed'
	);

	Released under MIT License:
	https://choosealicense.com/licenses/mit/

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

/* eslint-disable no-mixed-spaces-and-tabs */

// @include 'GetBounds.jsxinc';

function fitTo(items, scope, target, enforced) {
	if (items.constructor.name !== 'Array') items = Array(items);
	scope = scope || 'page';
	target = target || 'size';
	var SNAP_PCT = 1; // Snap distance in percent of the target
	var HW_PCT = 10;  // HW size in percent of the visible area
	var DEBUG = false;
	var clippingFrameRE = /^<(auto )?clip(ping)? frame>$/i;
	var item, page, pages, fitted;
	var newSelection = [];
	var doc = items[0].parent.parent;
	while (doc.constructor.name !== 'Document') doc = doc.parent;
	var oldRO = doc.viewPreferences.rulerOrigin;
	doc.viewPreferences.rulerOrigin = RulerOrigin.SPREAD_ORIGIN;
	app.scriptPreferences.measurementUnit = MeasurementUnits.MILLIMETERS;

	while ((item = items.shift())) {
		if (!Object.prototype.hasOwnProperty.call(item, 'parentPage')) continue;
		if (item.parent.constructor.name !== 'Spread') continue;
		if ((page = item.parentPage)) { // Skip objects on the pasteboard
			if ((fitted = fit2Bounds(item))) newSelection.push(fitted); else newSelection.push(item);
		} else if (enforced) { // When enforced, include objects on the pasteboard
			pages = app.activeWindow.activeSpread.pages;
			for (var i = 0, n = pages.length; i < n; i++) {
				if (item.geometricBounds[3] <= pages[0].bounds[3]) { page = pages[0]; break; }
				if (item.geometricBounds[1] >= pages[i].bounds[1] &&
				    item.geometricBounds[3] <= pages[i].bounds[3]) { page = pages[i]; break; }
				if (item.geometricBounds[1] >= pages[-1].bounds[1]) { page = pages[-1]; break; }
			}
			if ((fitted = fit2Bounds(item))) newSelection.push(fitted); else newSelection.push(item);
		}
	}
	if (newSelection.length > 0) app.select(newSelection);
	doc.viewPreferences.rulerOrigin = oldRO;

	function fit2Bounds(obj) {
		var b = getBounds(page);
		var B = {
			size: b[scope].size,
			target: b[scope][target],
			visible: b[scope].visible
		};
		if (!B.target) return obj;
		// Snap zones: target and visible area; visible area takes precedence
		var snapDist = B.visible ?
			Math.min(B.visible[2] - B.visible[0], B.visible[3] - B.visible[1]) * SNAP_PCT / 100 :
			(target === 'margins' ?
				Math.min(B.target[2] - B.target[0], B.target[3] - B.target[1]) * SNAP_PCT / 100 :
				Math.min(B.size[2] - B.size[0], B.size[3] - B.size[1]) * SNAP_PCT / 100);
		var Z = {
			target: (target === 'margins') ?
				[ B.target[0] + snapDist, B.target[1] + snapDist,
				  B.target[2] - snapDist, B.target[3] - snapDist ] :
				[ B.size[0] + snapDist, B.size[1] + snapDist,
				  B.size[2] - snapDist, B.size[3] - snapDist ],
			visible: B.visible ?
				[ B.visible[0] + snapDist, B.visible[1] + snapDist,
				  B.visible[2] - snapDist, B.visible[3] - snapDist ] :
				[ B.size[0] + snapDist, B.size[1] + snapDist,
				  B.size[2] - snapDist, B.size[3] - snapDist ]
		};
		// Misc object properties
		var O = {
			// Object bounds
			geo: obj.geometricBounds,
			vis: obj.visibleBounds,
			child: (obj.pageItems.length === 1 && obj.fillColor.name === 'None') ?
				obj.pageItems[0].visibleBounds : undefined,
			// Flags
			isStraight: Boolean(obj.absoluteRotationAngle === 0 ||
				Math.abs(obj.absoluteRotationAngle) === 90 ||
				Math.abs(obj.absoluteRotationAngle) === 180),
			isNotSkewed: Boolean(obj.absoluteShearAngle === 0),
			itHits: [ // Track sides that cross the visible area snap zone
				Boolean(obj.geometricBounds[0] <= Z.visible[0]),
				Boolean(obj.geometricBounds[1] <= Z.visible[1]),
				Boolean(obj.geometricBounds[2] >= Z.visible[2]),
				Boolean(obj.geometricBounds[3] >= Z.visible[3])
			],
			// Adjusted bounds
			reduced: [],
			fitted: []
		};

		// Compute the new bounds

		// Forced fit simply reframes the objects, except for orthogonal lines, which will be resized below
		if (enforced && obj.constructor.name !== 'GraphicLine') { obj.geometricBounds = B.target; return obj; }

		// HW has predefined dimensions
		if (/hw/gi.test(obj.label) &&
			(obj.constructor.name === 'TextFrame' || obj.constructor.name === 'Rectangle')) {
			var hwRef = (target === 'margins') ? B.target : B.size;
			if (B.visible) {
				hwRef = B.visible;
				if (target === 'margins') B.target = B.visible;
			}
			obj.geometricBounds = [
				hwRef[2] - (hwRef[2] - hwRef[0]) * Number(HW_PCT) / 100,
				B.target[1], B.target[2], B.target[3]
			];
			// Adjust text position using insets
			if (obj.constructor.name === 'TextFrame') {
				obj.textFramePreferences.insetSpacing = [
					0, hwRef[1] - B.target[1],
					B.target[2] - hwRef[2], B.target[3] - hwRef[3]
				];
			}
			return obj;
		}

		// Cancel if the object is outside the target
		if (O.vis[1] > B.target[3] || O.vis[3] < B.target[1] || // outside target, h
			O.vis[0] > B.target[2] || O.vis[2] < B.target[0]    // outside target, v
		) return undefined;

		// Cancel if the object is inside the target and doesn't touch the snap zone
		if (!(O.itHits[0] || O.itHits[1] || O.itHits[2] || O.itHits[3]) && // no SZ hits
			O.vis[1] > Z.target[1] && O.vis[3] < Z.target[3] && // outside SZ, h
			O.vis[0] > Z.target[0] && O.vis[2] < Z.target[2]    // outside SZ, v
		) return undefined;

		// Adjust object bounds: if larger, reduce to the target
		O.reduced = [
			O.geo[2] > B.target[0] ? Math.max(O.vis[0], B.target[0]) : O.geo[0],
			O.geo[3] > B.target[1] ? Math.max(O.vis[1], B.target[1]) : O.geo[1],
			O.geo[0] < B.target[2] ? Math.min(O.vis[2], B.target[2]) : O.geo[2],
			O.geo[1] < B.target[3] ? Math.min(O.vis[3], B.target[3]) : O.geo[3]
		];

		// If smaller but into the snap zone, fit to the target
		O.fitted = [
			O.reduced[0] < Z.target[0] ? B.target[0] : (O.itHits[0] ? B.target[0] : O.reduced[0]),
			O.reduced[1] < Z.target[1] ? B.target[1] : (O.itHits[1] ? B.target[1] : O.reduced[1]),
			O.reduced[2] > Z.target[2] ? B.target[2] : (O.itHits[2] ? B.target[2] : O.reduced[2]),
			O.reduced[3] > Z.target[3] ? B.target[3] : (O.itHits[3] ? B.target[3] : O.reduced[3])
		];
		// But not past content's bounds
		if (O.child) {
			O.fitted = [
				O.child[0] > B.target[0] ? Math.max(O.child[0], O.fitted[0]) : O.fitted[0],
				O.child[1] > B.target[1] ? Math.max(O.child[1], O.fitted[1]) : O.fitted[1],
				O.child[2] < B.target[2] ? Math.min(O.child[2], O.fitted[2]) : O.fitted[2],
				O.child[3] < B.target[3] ? Math.min(O.child[3], O.fitted[3]) : O.fitted[3]
			];
		}

		if (DEBUG) showDebugFrames();

		// Fit the object to the adjusted bounds

		// Already clipped
		if (clippingFrameRE.test(obj.name) && obj.pageItems[0].isValid) {
			obj.geometricBounds = O.fitted;
			return obj;
		}

		// Simple rectangles and containers
		if (obj.constructor.name === 'Rectangle' && O.isStraight && O.isNotSkewed &&
			(obj.pageItems.length === 0 || obj.pageItems.length === 1) &&
			obj.strokeWeight < 1) {
			obj.geometricBounds = O.fitted;
			return obj;
		}

		// Text frames
		if (obj.constructor.name === 'TextFrame' && O.isStraight && O.isNotSkewed) {
			obj.geometricBounds = O.fitted;
			return obj;
		}

		// Orthogonal lines
		var isOrthoLine = (obj.constructor.name === 'GraphicLine' &&
			obj.paths[0].entirePath.length === 2 &&
			(obj.paths[0].entirePath[0].length === 2 || obj.paths[0].entirePath[1].length === 2));
		if (isOrthoLine && O.geo[0] === O.geo[2]) { // horizontal
			obj.paths[0].entirePath = [
				[ enforced ? B.target[1] : O.fitted[1], obj.paths[0].entirePath[0][1] ],
				[ enforced ? B.target[3] : O.fitted[3], obj.paths[0].entirePath[1][1] ]
			];
			return obj;
		}
		if (isOrthoLine && O.geo[1] === O.geo[3]) { // vertical
			obj.paths[0].entirePath = [
				[ obj.paths[0].entirePath[0][0], enforced ? B.target[0] : O.fitted[0] ],
				[ obj.paths[0].entirePath[1][0], enforced ? B.target[2] : O.fitted[2] ]
			];
			return obj;
		}

		// Groups are only reduced
		if (obj.constructor.name === 'Group') return clipObject(O.reduced);

		// Clip other types
		return clipObject(O.fitted);

		function clipObject(fitMode) {
			if (O.vis[0] >= B.target[0] && O.vis[1] >= B.target[1] &&
				O.vis[2] <= B.target[2] && O.vis[3] <= B.target[3]) return obj;
			var frame = doc.rectangles.add(
				obj.itemLayer,
				LocationOptions.AFTER, obj,
				{
					name: '<clipping frame>',
					label: obj.label,
					fillColor: 'None',
					strokeColor: 'None',
					geometricBounds: fitMode
				}
			);
			frame.sendToBack(obj);
			app.select(obj); app.cut();
			app.select(frame); app.pasteInto();
			return frame;
		}

		function showDebugFrames() {
			var layer = doc.layers.item('.debug');
			if (layer.isValid) { layer.locked = false; layer.remove(); }
			layer = doc.layers.add({ name: '.debug', layerColor: UIColors.BLACK }).move(LocationOptions.AT_END);
			// createDebugFrame('Black', false, O.fitted, 'O.fitted');
			// createDebugFrame('Black', false, O.reduced, 'O.reduced');
			if (O.child) createDebugFrame('Yellow', false, O.child, 'child');
			createDebugFrame('Black', false, B.target, 'target');
			createDebugFrame('Cyan', true,  Z.target, 'target SZ');
			createDebugFrame('Magenta', true,  Z.visible, 'visible SZ');
			createDebugFrame('Cyan', false, b.page.margins, 'page margins');
			layer.locked = true;

			function createDebugFrame(color, /*bool*/isZone, bounds, label) {
				page.parent.rectangles.add(
					layer,
					LocationOptions.AT_END,
					{
						name: '<debug frame>',
						label: label || '',
						geometricBounds: bounds,
						contentType: ContentType.UNASSIGNED,
						fillColor: 'None',
						strokeColor: color,
						strokeWeight: isZone ? snapDist : '1.5 pt',
						strokeAlignment: isZone ? StrokeAlignment.OUTSIDE_ALIGNMENT : StrokeAlignment.INSIDE_ALIGNMENT,
						strokeType: isZone ? '$ID/Solid' : '$ID/Canned Dashed 3x2',
						transparencySettings: { blendingSettings: { opacity: isZone ? 25 : 100 }}
					}
				);
			}
		}
	}
}
