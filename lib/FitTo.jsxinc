/*
	FitTo v5.1 (2021-04-21)
	(c) 2020-2021 Paul Chiorean (jpeg@basement.ro)

	Resizes the selected objects to the page/spread's size/margins/visible area/bleed.

	It's called internally by the other "FitTo" scripts, with arguments:
	[0] SCOPE: "page" | "spread" (default "page")
	[1] TARGET: "size" | "margins" | "visible" | "bleed" (default "size")
	[2] FORCED: true | false (default "false")

	Example for fit to page size, forced:
	app.doScript(FitTo, ScriptLanguage.javascript,
	[ "page", "size", true ],
	UndoModes.ENTIRE_SCRIPT, "Fit to page");

	Released under MIT License:
	https://choosealicense.com/licenses/mit/

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

// @include "Bounds.jsxinc";

const DEBUG = false;
const SNAP_PCT = 1; // Snap distance: percent of target
const HW_PCT = 10; // HW: percent of visible area

function FitTo(args) {

if (!(doc = app.activeDocument)) exit();
var sel = doc.selection;
if (sel.length == 0 || (sel[0].constructor.name == "Guide")) exit();

const SCOPE = args[0] || "page";
const TARGET = args[1] || "size";
const FORCED = args[2] || false;

var oldRO = doc.viewPreferences.rulerOrigin;
doc.viewPreferences.rulerOrigin = RulerOrigin.SPREAD_ORIGIN;
app.scriptPreferences.measurementUnit = MeasurementUnits.MILLIMETERS;
var obj, page, fitted, newSel = [];
while (obj = sel.shift()) {
	if (page = obj.parentPage) { // Skip objects on pasteboard
		if (fitted = Fit2Bounds(obj)) { newSel.push(fitted) } else newSel.push(obj);
	} else if (FORCED) { // If FORCED, include objects on pasteboard
		var pages = app.activeWindow.activeSpread.pages;
		for (var i = 0; i < pages.length; i++) {
			if (obj.geometricBounds[3] <= pages[0].bounds[3]) { page = pages[0]; break }
			if (obj.geometricBounds[1] >= pages[i].bounds[1] &&
				obj.geometricBounds[3] <= pages[i].bounds[3]) { page = pages[i]; break }
			if (obj.geometricBounds[1] >= pages[-1].bounds[1]) { page = pages[-1]; break }
		}
		if (fitted = Fit2Bounds(obj)) { newSel.push(fitted) } else newSel.push(obj);
	}
}
if (newSel.length > 0) app.select(newSel);
doc.viewPreferences.rulerOrigin = oldRO;

function Fit2Bounds(obj) {
	const B = Bounds(page);
	var b = {
		size: B[SCOPE].size,
		target: B[SCOPE][TARGET],
		vis: B[SCOPE].visible
	}
	if (!b.target) return obj;
	var o = {
		geo: obj.geometricBounds,
		vis: obj.visibleBounds,
		child: (obj.pageItems.length == 1 && obj.fillColor.name == "None") ?
			obj.pageItems[0].visibleBounds : undefined,
		hit: []
	}
	var isStraight = Boolean(obj.absoluteRotationAngle == 0 ||
		Math.abs(obj.absoluteRotationAngle) == 90 ||
		Math.abs(obj.absoluteRotationAngle) == 180);
	// Snap zones: target and visible area; visible area takes precedence
	var snapDist = !!b.vis ?
		Math.min(b.vis[2] - b.vis[0], b.vis[3] - b.vis[1]) * SNAP_PCT / 100 :
		(TARGET == "margins" ?
			Math.min(b.target[2] - b.target[0], b.target[3] - b.target[1]) * SNAP_PCT / 100 :
			Math.min(b.size[2] - b.size[0], b.size[3] - b.size[1]) * SNAP_PCT / 100);
	var snapZone = {
		target: (TARGET == "margins") ?
			[ b.target[0] + snapDist, b.target[1] + snapDist,
			  b.target[2] - snapDist, b.target[3] - snapDist ] :
			[ b.size[0] + snapDist, b.size[1] + snapDist,
			  b.size[2] - snapDist, b.size[3] - snapDist ],
		vis: !!b.vis ?
			[ b.vis[0] + snapDist, b.vis[1] + snapDist,
			  b.vis[2] - snapDist, b.vis[3] - snapDist ] :
			[ b.size[0] + snapDist, b.size[1] + snapDist,
			  b.size[2] - snapDist, b.size[3] - snapDist ]
	}

	// Fit: HW (dimensions are predefined, so skip the nasty stuff)
	if (obj.label == "HW" && (obj.constructor.name == "TextFrame" || obj.constructor.name == "Rectangle")) {
		var hwRef = (TARGET == "margins") ? b.target : b.size;
		if (!!b.vis) {
			hwRef = b.vis;
			if (TARGET == "margins") b.target = b.vis;
		}
		obj.geometricBounds = [
			hwRef[2] - (hwRef[2] - hwRef[0]) * Number(HW_PCT) / 100,
			b.target[1], b.target[2], b.target[3]
		];
		// Adjust inset for text frames
		if (obj.constructor.name == "TextFrame") {
			obj.textFramePreferences.insetSpacing = [
				0,
				hwRef[1] - b.target[1], b.target[2] - hwRef[2], b.target[3] - hwRef[3]
			];
		}
		return obj;
	}

	// Compute new bounds
	if (!FORCED) {
		// Return if obj is outside bounds
		if (o.vis[2] <= b.target[0] || o.vis[3] <= b.target[1] ||
			o.vis[0] >= b.target[2] || o.vis[1] >= b.target[3]) return;
		// Return if obj is inside bounds, but not into target snap zone
		o.hit = [ // Remember obj's sides that touch visible area snap zone
			(o.geo[0] <= snapZone.vis[0] && o.geo[2] >= snapZone.vis[0] &&
			 o.geo[1] <= snapZone.vis[3] && o.geo[3] >= snapZone.vis[1]),
			(o.geo[1] <= snapZone.vis[1] && o.geo[3] >= snapZone.vis[1] &&
			 o.geo[0] <= snapZone.vis[2] && o.geo[2] >= snapZone.vis[0]),
			(o.geo[2] >= snapZone.vis[2] && o.geo[0] <= snapZone.vis[2] &&
			 o.geo[1] <= snapZone.vis[3] && o.geo[3] >= snapZone.vis[1]),
			(o.geo[3] >= snapZone.vis[3] && o.geo[1] <= snapZone.vis[3] &&
			 o.geo[0] <= snapZone.vis[2] && o.geo[2] >= snapZone.vis[0])
		];
		if (!(o.hit[0] || o.hit[1] || o.hit[2] || o.hit[3]) &&
			(o.vis[0] >= snapZone.target[0] && o.vis[1] >= snapZone.target[1] &&
			 o.vis[2] <= snapZone.target[2] && o.vis[3] <= snapZone.target[3])) return;
		// Adjusted bounds: if larger than target, reduce
		b.reduce = [
			o.geo[2] > b.target[0] ? Math.max(o.vis[0], b.target[0]) : o.geo[0],
			o.geo[3] > b.target[1] ? Math.max(o.vis[1], b.target[1]) : o.geo[1],
			o.geo[0] < b.target[2] ? Math.min(o.vis[2], b.target[2]) : o.geo[2],
			o.geo[1] < b.target[3] ? Math.min(o.vis[3], b.target[3]) : o.geo[3]
		];
		// If smaller than target & into snap zone, expand
		b.expand = [
			b.reduce[0] < snapZone.target[0] ? b.target[0] : (o.hit[0] ? b.target[0] : b.reduce[0]),
			b.reduce[1] < snapZone.target[1] ? b.target[1] : (o.hit[1] ? b.target[1] : b.reduce[1]),
			b.reduce[2] > snapZone.target[2] ? b.target[2] : (o.hit[2] ? b.target[2] : b.reduce[2]),
			b.reduce[3] > snapZone.target[3] ? b.target[3] : (o.hit[3] ? b.target[3] : b.reduce[3])
		];
		// but not past content's bounds
		if (o.child) b.expand = [
			o.child[0] > b.target[0] ? Math.max(o.child[0], b.expand[0]) : b.expand[0],
			o.child[1] > b.target[1] ? Math.max(o.child[1], b.expand[1]) : b.expand[1],
			o.child[2] < b.target[2] ? Math.min(o.child[2], b.expand[2]) : b.expand[2],
			o.child[3] < b.target[3] ? Math.min(o.child[3], b.expand[3]) : b.expand[3]
		];
		if (DEBUG) DebugFrames();
	}

	// Fit obj to new bounds
	// -- Already clipped
	if ((obj.name == "<clip frame>" || obj.name == "<auto clip frame>") &&
			obj.pageItems[0].isValid) {
		obj.geometricBounds = FORCED ? b.target : b.expand;
		return obj;
	}
	// -- Simple rectangles and containers
	if (obj.constructor.name == "Rectangle" &&
			(obj.pageItems.length == 0 || obj.pageItems.length == 1) &&
			(obj.strokeWeight == 0 || obj.strokeAlignment == StrokeAlignment.INSIDE_ALIGNMENT) &&
			isStraight) {
		obj.geometricBounds = FORCED ? b.target : b.expand;
		return obj;
	}
	// -- Text frames
	if (obj.constructor.name == "TextFrame" && isStraight) {
		obj.geometricBounds = FORCED ? b.target : b.expand;
		return obj;
	}
	// -- Orthogonal lines
	var isOrthoLine = (obj.constructor.name == "GraphicLine" &&
		obj.paths[0].entirePath.length == 2 &&
		(obj.paths[0].entirePath[0].length == 2 || obj.paths[0].entirePath[1].length == 2));
	if (isOrthoLine && o.geo[0] == o.geo[2]) { // horizontal
		obj.paths[0].entirePath = [
			[ FORCED ? b.target[1] : b.expand[1], obj.paths[0].entirePath[0][1] ],
			[ FORCED ? b.target[3] : b.expand[3], obj.paths[0].entirePath[1][1] ]
		];
		return obj;
	}
	if (isOrthoLine && o.geo[1] == o.geo[3]) { // vertical
		obj.paths[0].entirePath = [
			[ obj.paths[0].entirePath[0][0], FORCED ? b.target[0] : b.expand[0] ],
			[ obj.paths[0].entirePath[1][0], FORCED ? b.target[2] : b.expand[2] ]
		];
		return obj;
	}
	// -- Groups
	if (obj.constructor.name == "Group")
		if (FORCED) { obj.geometricBounds = b.target; return obj }
		else return Clip(obj, b.reduce);
	// -- Other cases
	return Clip(obj, FORCED ? b.target : b.expand);

	function Clip(obj, fit) {
		if (o.vis[0] >= b.target[0] && o.vis[1] >= b.target[1] &&
			o.vis[2] <= b.target[2] && o.vis[3] <= b.target[3]) return obj;
		var frame = doc.rectangles.add(
			obj.itemLayer,
			LocationOptions.AFTER, obj,
			{ name: "<clip frame>",
			label: obj.label,
			fillColor: "None",
			strokeColor: "None",
			geometricBounds: fit }
		);
		frame.sendToBack(obj);
		app.select(obj); app.cut(); app.select(frame); app.pasteInto();
		return frame;
	}

	function DebugFrames() {
		var layer = doc.layers.item(".debug");
		if (!layer.isValid) {
			doc.layers.add({ name: ".debug", layerColor: UIColors.BLACK })
			.move(LocationOptions.AT_END);
		} else {
			var obj, items = page.parent.pageItems.everyItem().getElements();
			while (obj = items.shift()) if (obj.label == "debug") obj.remove();
		}
		// dbgFrame("Black", false, b.expand);
		// dbgFrame("Black", false, b.reduce);
		if (o.child) dbgFrame("Yellow", false, o.child);
		dbgFrame("Black", false, b.target);
		dbgFrame("Cyan", true, snapZone.target);
		dbgFrame("Magenta", true, snapZone.vis);
		dbgFrame("Cyan", false, B.page.margins);

		function dbgFrame(color, /*bool*/isSZ, bounds) {
			var frame = page.parent.rectangles.add(
				layer,
				{ label: "debug",
				geometricBounds: bounds,
				contentType: ContentType.UNASSIGNED,
				fillColor: "None",
				strokeColor: color,
				strokeWeight: isSZ ? snapDist : "2 pt",
				strokeAlignment: isSZ ? StrokeAlignment.OUTSIDE_ALIGNMENT : StrokeAlignment.INSIDE_ALIGNMENT,
				strokeType: isSZ ? "$ID/Solid" : "$ID/Canned Dashed 3x2" }
			);
			frame.transparencySettings.blendingSettings.opacity = isSZ ? 25 : 100;
		}
	}
}

} // End main
