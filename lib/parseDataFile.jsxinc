/**
 * Reads a TSV (tab-separated-values) file, returning an object containing found records and errors.
 * Blank lines and those starting with `#` are ignored. A line ending in `\` continues on the next line.
 * Use `@defaults` to include the global default, or `@include path/to/another.tsv` for other file.
 * The path can be absolute, or relative to the data file; a default path can be set with `@includepath path/to`.
 * @version 23.10.6
 * @author Paul Chiorean <jpeg@basement.ro>
 * @license MIT
 * @param {File} dataFile - A tab-separated-values file (object).
 * @param {(string|string[])} [defaultName] - Default data file name, or an array of file names (used for `@defaults`).
 * @returns {{ header: [], data: [ { record: [], source: [] }, {}, ... ], errors: [] }}
 */

// @include 'stat.jsxinc';

function parseDataFile(dataFile, defaultName) {
	var record, part, src, includeFolder;
	var parsed = { header: [], data: [], errors: [] };
	var isHeaderFound = false;
	var includeFile = '';
	var line = 0;

	dataFile = File(compactRelPath(dataFile.absoluteURI));
	dataFile.open('r');
	dataFile.encoding = 'UTF-8';
	includeFolder = Folder(dataFile.path);

	while (!dataFile.eof) {
		line++;
		src = [ decodeURI(dataFile.absoluteURI), line ];
		record = (part ? part.slice(0,-1) : '') + dataFile.readln(); // Join continued line
		record = record.replace(/#(.+)?$/g, ''); // Trim everything after '#' (comments)
		record = record.replace(/^ +|[ \t]+$/g, ''); // Trim spaces at both ends
		if (record.slice(-1) === '\\') { part = record; continue; } else { part = ''; } // '\': Line continues
		if (record.replace(/^\s+|\s+$/g, '') === '') continue; // Blank line => skip
		if (record.slice(0,1) === '@') { parseInclude(); continue; } // Include directive => parse
		record = record.split(/ *\t */); // Split on \t & trim spaces
		if (!isHeaderFound) { isHeaderFound = true; parsed.header = record; continue; } // 1st valid line => header
		parsed.data.push({ record: record, source: src });
	}
	dataFile.close();
	return parsed;

	function parseInclude() {
		var tmpParsed = {};
		var include = record.replace(/ +$/g, '').replace(/ ['"]|['"]$/g, '');
		include = include.match(/^@(include(?:path)?|defaults|default)(?: +)?(.+)?$/i);
		if (!include) {
			stat(parsed.errors, src.join(':'), '\'' + record + '\' is not recognized (see docs).', -1);
			return;
		}

		switch (include[1]) {
			case 'includepath':
				if (include[2]) {
					if (!/^~?\/{1,2}/.test(include[2]))
						include[2] = Folder(dataFile.path).absoluteURI + '/' + include[2];
					include[2] = compactRelPath(include[2]);
					if (Folder(include[2]).exists) includeFolder = Folder(include[2]);
					else stat(parsed.errors, src.join(':'), 'Folder \'' + include[2] + '\' is not found.', -1);
				} else {
					stat(parsed.errors, src.join(':'), '\'' + record + '\' is malformed (see docs).', -1);
				}
				return;
			case 'include':
				if (include[2]) {
					if (!/^~?\/{1,2}/.test(include[2])) include[2] = includeFolder.absoluteURI + '/' + include[2];
					include[2] = compactRelPath(include[2]);
					if (!/\.(tsv|txt)$/i.test(include[2])) {
						stat(parsed.errors, src.join(':'),
							'File \'' + decodeURI(include[2]) + '\' is not a TSV file.', -1);
						return;
					}
					if (File(include[2]).exists) {
						includeFile = File(include[2]);
					} else {
						stat(parsed.errors, src.join(':'), 'File \'' + decodeURI(include[2]) + '\' is not found.', -1);
						return;
					}
				} else {
					stat(parsed.errors, src.join(':'), '\'' + record + '\' is malformed (see docs).', -1);
					return;
				}
				break;
			case 'default':
			case 'defaults':
				if (!defaultName) return;
				includeFile = getDataFile(defaultName, true);
				if (!includeFile || !includeFile.exists) {
					stat(parsed.errors, src.join(':'),
						'Default list \'' + defaultName.join('\' or \'') + '\' is not found.', -1);
					return;
				}
				break;
		}

		if (includeFile.absoluteURI === dataFile.absoluteURI) return; // Skip self
		tmpParsed = parseDataFile(includeFile);
		parsed.data = parsed.data.concat(tmpParsed.data);
		parsed.errors = parsed.errors.concat(tmpParsed.errors);
	}
}

/**
 * Returns the first occurrence of file `name`, first searching for a local one (in the current
 * folder or the parent folder of the active document), then a default one (on the desktop or next
 * to the running script). It also matches local files starting with `_`, which take precedence.
 * @version 23.4.2
 * @author Paul Chiorean <jpeg@basement.ro>
 * @license MIT
 * @param {(string|string[])} name - The file name, or an array of file names.
 * @param {boolean} [skipLocal=false] - If `true`, don't search locally.
 * @returns {File|void} - File object if found, else `undefined`.
 */
function getDataFile(name, skipLocal) {
	var file = '';
	var doc = app.activeDocument;
	var script = (function () { try { return app.activeScript; } catch (e) { return new File(e.fileName); } }());
	var docHasPath = (function () {
		var ret = false;
		try { ret = !!doc.filePath; } catch (e) {}
		return ret;
	}());

	if (name.constructor.name !== 'Array') name = Array(name);

	for (var i = 0; i < name.length; i++) {
		if (!skipLocal) {
			if (docHasPath && (file = File(doc.filePath + '/_'    + name[i])) && file.exists) return file;
			if (docHasPath && (file = File(doc.filePath + '/'     + name[i])) && file.exists) return file;
			if (docHasPath && (file = File(doc.filePath + '/../_' + name[i])) && file.exists) return file;
			if (docHasPath && (file = File(doc.filePath + '/../'  + name[i])) && file.exists) return file;
		}
		if ((file = File(Folder.desktop + '/'    + name[i])) && file.exists) return file;
		if ((file = File(script.path    + '/'    + name[i])) && file.exists) return file;
		if ((file = File(script.path    + '/../' + name[i])) && file.exists) return file;
	}
	return undefined;
}

function compactRelPath(/*string*/str) {
	str = str.replace(/^\.\/|\/\.$/, '')   // Trim './' and '/.
		.replace(/\/\.\//g, '/')           // Trim '/./'
		.replace(/\/[^\/]+\/\.{2}\//, '/') // Resolve '/../'
		.replace(/\/+/g, '/');             // Compact '//'
	if (/\/\.{2}\//.test(str)) str = compactRelPath(str);
	return str;
}
