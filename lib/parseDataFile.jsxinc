/**
 * Reads a TSV (tab-separated-values) file, returning an object containing found records and errors.
 * Blank lines and those starting with `#` are ignored. A line ending in `\` continues on the next line.
 * Use `@defaults` to include the global default, or `@include path/to/another.tsv` for other file.
 * The path can be absolute, or relative to the data file; a default path can be set with `@includepath path/to`.
 * @version 22.9.24
 * @author Paul Chiorean <jpeg@basement.ro>
 * @license MIT
 * @param {File} dataFile - A tab-separated-values file (object).
 * @returns {{records: array, status: { info: array, warn: array, fail: array }}}
 */
function parseDataFile(dataFile) {
	var record, part, source, includeFolder;
	var records = [];
	var status = { info: [], warn: [], fail: [] };
	var isHeaderFound = false;
	var line = 0;
	var includeFile = '';

	dataFile = File(compactRelPath(dataFile.absoluteURI));
	dataFile.open('r');
	dataFile.encoding = 'UTF-8';
	includeFolder = Folder(dataFile.path);

	while (!dataFile.eof) {
		line++;
		source = decodeURI(dataFile.absoluteURI) + ':' + line + ' :: ';
		record = (part ? part.slice(0,-1) : '') + dataFile.readln();
		if (record.slice(-1) === '\\') { part = record; continue; } else { part = ''; } // '\': Line continues
		if (record.replace(/^\s+|\s+$/g, '') === '') continue;            // Blank line, skip
		if (record.slice(0,1) === '\u0023') continue;                     // '#': Comment line, skip
		if (record.slice(0,1) === '\u0040') { parseInclude(); continue; } // '@': Include directive, parse
		if (!isHeaderFound) { isHeaderFound = true; continue; }           // Header line, skip
		record = record.replace(/#.+$/g, '');    // Trim end comment
		record = record.replace(/^ +| +$/g, ''); // Trim spaces at both ends
		record = record.split(/ *\t */); // Split on \t & trim spaces
		checkRecord();
	}
	dataFile.close();
	record = '';

	return {
		records: records,
		status: { info: status.info, warn: status.warn, fail: status.fail }
	};

	function compactRelPath(/*string*/str) {
		str = str.replace(/^\.\/|\/\.$/, '').replace(/\/\.\//g, '/'); // Trim '.'
		str = str.replace(/\/[^\/]+\/\.{2}/g, '/'); // Resolve '..'
		str = str.replace(/\/+/g, '/'); // Compact '//'
		return str;
	}

	function parseInclude() {
		var tmpData = [];
		var include = record.replace(/ +$/g, '').replace(/ ['"]|['"]$/g, '');
		include = include.match(/^@(include(?:path)?|defaults|default)(?: +)?(.+)?$/i);
		if (!include) {
			status.warn.push(source + '\'' + record + '\' is not recognized (see docs).');
			return;
		}

		switch (include[1]) {
			case 'includepath':
				if (include[2]) {
					if (!/^~?\/{1,2}/.test(include[2])) include[2] = Folder(dataFile.path).absoluteURI + '/' + include[2];
					include[2] = compactRelPath(include[2]);
					if (Folder(include[2]).exists) includeFolder = Folder(include[2]);
					else status.warn.push(source + '\'' + include[2] + '\' not found.');
				} else {
					status.warn.push(source + '\'' + record + '\' is malformed (see docs).');
				}
				return;
			case 'include':
				if (include[2]) {
					if (!/^~?\/{1,2}/.test(include[2])) include[2] = includeFolder.absoluteURI + '/' + include[2];
					include[2] = compactRelPath(include[2]);
					if (!/\.(tsv|txt)$/i.test(include[2])) {
						status.warn.push(source + '\'' + decodeURI(include[2]) + '\' is not a TSV file.');
						return;
					}
					if (File(include[2]).exists) {
						includeFile = File(include[2]);
					} else {
						status.warn.push(source + '\'' + decodeURI(include[2]) + '\' not found.');
						return;
					}
				} else {
					status.warn.push(source + '\'' + record + '\' is malformed (see docs).');
					return;
				}
				break;
			case 'default':
			case 'defaults':
				includeFile = getDataFile(dataFileName, true);
				if (!includeFile || !includeFile.exists) {
					status.info.push(source + 'Default list \'' + decodeURI(dataFileName) + '\' not found.');
					return;
				}
				break;
		}

		if (includeFile.absoluteURI === dataFile.absoluteURI) return; // Skip self
		tmpData = parseDataFile(includeFile);
		records = records.concat(tmpData.records);
		status = {
			info: status.info.concat(tmpData.status.info),
			warn: status.warn.concat(tmpData.status.warn),
			fail: status.fail.concat(tmpData.status.fail)
		};
	}

	function checkRecord() { // Just a template
		var tmpStatus = { info: [], warn: [], fail: [] };
		if (!record[0]) tmpStatus.warn.push(source + 'Some error message');
		// ...
		if (tmpStatus.warn.length === 0 && tmpStatus.fail.length === 0) {
			records.push({
				key1: record[0] // || someDefaultValue
				// ...
			});
		}
		status = {
			info: status.info.concat(tmpStatus.info),
			warn: status.warn.concat(tmpStatus.warn),
			fail: status.fail.concat(tmpStatus.fail)
		};
	}
}
