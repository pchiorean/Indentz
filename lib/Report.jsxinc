/**
 * Displays a message in a scrollable list with optional filtering and/or compact mode.
 * Inspired by this snippet by Peter Kahrel:
 * http://web.archive.org/web/20100807190517/http://forums.adobe.com/message/2869250#2869250
 * @version 22.5.8
 * @author Paul Chiorean <jpeg@basement.ro>
 * @license MIT
 * @param {string|string[]} message - Message to be displayed. Can be a string or a strings array.
 * @param {string} [title] - Dialog title. (Optional.)
 * @param {boolean} [showFilter=false] - If `true` it shows a filtering field; wildcards: `?` (any character),
 * space and `*` (AND), `|` (OR). (Optional.)
 * @param {boolean} [showCompact=false] - If `true` duplicates are removed and the message is sorted. (Optional.)
 */
function report(message, title, showFilter, showCompact) {
	var w, search, list;
	if (message.constructor.name !== 'Array') message = message.split(/\r|\n/g);
	// if (message.length === 0) return;
	w = new Window('dialog', title || '');
	// Sort and remove duplicates
	if (showCompact && message.length > 1) {
		message = message.sort(naturalSorter);
		for (var i = 1, l = message[0]; i < message.length; l = message[i], i++) {
			if (l === message[i]) { message.splice(i, 1); i--; }
			if (message[i] === '') { message.splice(i, 1); i--; }
		}
	}
	// Add a filtering field
	if (showFilter && message.length > 1) {
		search = w.add('edittext { characters: 40, helpTip: "Wildcards: \'?\' (any character), space and \'*\' (AND), \'|\' (OR)" }');
		search.onChanging = function () {
			var str, line, i, n;
			var result = [];
			if (this.text === '') { list.text = message.join('\n'); w.text = title; return; }
			str = this.text.replace(/[.[\]{+}]/g, '\\$&');                          // Pass through '^*()|?'
			str = str.replace(/\?/g, '.');                                          // '?' -> Any character
			if (/[ *]/g.test(str)) str = '(' + str.replace(/ +|\*/g, ').*(') + ')'; // Space or '*' -> AND
			str = RegExp(str, 'gi');
			for (i = 0, n = message.length; i < n; i++) {
				line = message[i].toString().replace(/^\s+?/g, '');
				if (str.test(line)) result.push(line.replace(/\r|\n/g, '\u00b6').replace(/\t/g, '\\t'));
			}
			w.text = str + ' | ' + result.length + ' record' + (result.length === 1 ? '' : 's');
			if (result.length > 0) list.text = result.join('\n'); else list.text = '';
		};
	}
	list = w.add('edittext', undefined, message.join('\n'), { multiline: true, scrolling: true, readonly: true });
	list.characters = (function () {
		var width = 50;
		for (var i = 0, n = message.length; i < n; width = Math.max(width, message[i].toString().length), i++);
		return width - 10;
	}());
	list.minimumSize.width  = 100; list.maximumSize.width  = 1800;
	list.minimumSize.height = 100; list.maximumSize.height = 1024;
	w.add('button { text: "Close", properties: { name: "ok" } }');
	w.ok.active = true;
	w.show();

	// https://stackoverflow.com/questions/2802341/javascript-natural-sort-of-alphanumerical-strings/2802804#2802804
	function naturalSorter(as, bs) {
		var a, b, a1, b1, n, L;
		var i = 0;
		var rx = /(\.\d+)|(\d+(\.\d+)?)|([^\d.]+)|(\.\D+)|(\.$)/g;
		if (as === bs) return 0;
		a = as.toLowerCase().match(rx);
		b = bs.toLowerCase().match(rx);
		L = a.length;
		while (i < L) {
			if (!b[i]) return 1;
			a1 = a[i];
			b1 = b[i++];
			if (a1 !== b1) {
				n = a1 - b1;
				if (!isNaN(n)) return n;
				return a1 > b1 ? 1 : -1;
			}
		}
		return b[i] ? -1 : 0;
	}
}
