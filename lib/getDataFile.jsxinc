/**
 * Returns the first occurrence of `dataFile`, first searching for a local one (in the current
 * folder or the parent folder of the active document), then a default one (on the desktop or next
 * to the running script). It also matches local files starting with `_`, which take precedence.
 * @param {(string|string[])} dataFile - A file name, or an array of file names.
 * @param {boolean} [skipLocal=false] - If `true`, don't search locally.
 * @returns {File|void} - File object if found, else `undefined`.
 */
function getDataFile(dataFile, skipLocal) {
	var file = '';
	var doc = app.activeDocument;
	var script = (function () { try { return app.activeScript; } catch (e) { return new File(e.fileName); } }());
	if (dataFile.constructor.name !== 'Array') dataFile = Array(dataFile);

	for (var i = 0; i < dataFile.length; i++) {
		if (!skipLocal) {
			if (doc && doc.saved && (file = File(doc.filePath + '/_'    + dataFile[i])) && file.exists) return file;
			if (doc && doc.saved && (file = File(doc.filePath + '/'     + dataFile[i])) && file.exists) return file;
			if (doc && doc.saved && (file = File(doc.filePath + '/../_' + dataFile[i])) && file.exists) return file;
			if (doc && doc.saved && (file = File(doc.filePath + '/../'  + dataFile[i])) && file.exists) return file;
		}
		if ((file = File(Folder.desktop + '/'    + dataFile[i])) && file.exists) return file;
		if ((file = File(script.path    + '/'    + dataFile[i])) && file.exists) return file;
		if ((file = File(script.path    + '/../' + dataFile[i])) && file.exists) return file;
	}
	return undefined;
}
