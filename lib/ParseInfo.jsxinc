// (This function is just a stub.)

/**
 * Reads a TSV (tab-separated-values) file, returning an object containing found records and errors.
 * It ignores blank lines and those prefixed with `#`. `@path/to/include.txt` includes records
 * from `include.txt`; `@default` includes the default data file (see `getDataFile()`).
 * @param {File} dataFile - Tab-separated-values file (object).
 * @returns {{records: array, errors: array}}
 * @example
 * // @include 'GetDataFile.jsxinc';
 * // @include 'Report.jsxinc';
 * var dataFile = getDataFile('data.txt');
 * if (!dataFile) { alert('No data file found.'); exit(); }
 * var data = parseInfo(dataFile);
 * // <snip>
 * if (data.errors.length > 0) { report(data.errors, decodeURI(dataFile.getRelativeURI(doc.filePath))); exit(); }
 * if (data.records.length === 0) exit();
 */
function parseInfo(dataFile) {
	var infoLine, include, includeFile;
	var buffer = [];
	var records = [];
	var errors = [];
	var flgHeader = false;
	var line = 0;
	dataFile.open('r');
	while (!dataFile.eof) {
		infoLine = dataFile.readln(); line++;
		if (infoLine.replace(/^\s+|\s+$/g, '') === '') continue; // Ignore blank lines
		if (infoLine.slice(0,1) === '\u0023') continue;          // Ignore lines prefixed with '#'
		infoLine = infoLine.split(/ *\t */);
		// Header
		if (!flgHeader) { flgHeader = true; continue; }
		// '@include'
		if (infoLine[0].slice(0,1) === '\u0040') { // '@'
			include = infoLine[0].slice(1).replace(/^\s+|\s+$/g, '').replace(/^['"]+|['"]+$/g, '');
			includeFile = /^default(s?)$/i.test(include) ?                      // '@default' ?
				getDataFile(decodeURI(dataFile.name).replace(/^_/, ''), true) : // Include default data file :
				File(include);                                                  // Include 'path/to/file.txt'
			if (includeFile && includeFile.exists) {
				if (includeFile.fullName === dataFile.fullName) continue;       // Skip self
				buffer = parseInfo(includeFile);
				records = records.concat(buffer.records);
			}
		} else {
			// Data validation/defaults
			if (!infoLine[0]) errors.push('Line ' + line + ': Some error');
			// ...
			if (errors.length === 0) {
				records.push({
					key1: infoLine[0]
					// ...
				});
			}
		}
	}
	dataFile.close(); infoLine = '';
	return { records: records, errors: errors };
}
