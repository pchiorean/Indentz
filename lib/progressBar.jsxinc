/**
 * Creates a palette with two progress bars and a message; the second bar (optional) may be used for microsteps.
 * @version 22.11.19
 * @author Paul Chiorean <jpeg@basement.ro>
 * @license MIT
 * @param {string} title - Palette title.
 * @param {number} maxValue - Number of steps for the main progress bar.
 * @param {number} [maxWidth] - Maximum message length (characters); if omitted, no message is shown (aka mini mode).
 */
function ProgressBar(title, maxValue, maxWidth) {
	var pb = new Window('palette', title);
	pb.bars = pb.add('group { margins: 0, orientation: "column", spacing: 1 }');
	pb.bar1 = pb.bars.add('progressbar', undefined, 0, (maxValue || 100));
	pb.bar2 = pb.bars.add('progressbar', undefined, 0, (maxValue || 100));
	pb.bar1.preferredSize.height = 12;
	pb.bar2.preferredSize.height = 3;
	pb.bar2.visible = false;
	// If the maximum length of the message is defined (maxWidth) we have a full palette
	// with text and progress bar(s), otherwise a mini-palette without text, of fixed width
	if (maxWidth) {
		pb.msg = pb.add('statictext { properties: { truncate: "middle" } }');
		pb.msg.characters = Math.max(maxWidth, 50);
		pb.layout.layout();
		pb.bars.size = [ pb.msg.bounds[2], 16 ];
		pb.bar1.size.width = pb.bar2.size.width = pb.bars.size.width;
	} else {
		pb.layout.layout();
		pb.bars.size = [ 415, 16 ];
		pb.bar1.size.width = pb.bar2.size.width = pb.bars.size.width;
	}
	/**
	 * Updates the message.
	 * @method
	 * @param {string} [message] - Message; if omitted, the previous message is cleared.
	 */
	this.msg = function (message) {
		if (pb.msg) {
			if (message) pb.msg.text = message;
			pb.msg.visible = !!message;
		}
		updatePB();
	};
	/**
	 * Increases the value of the main progress bar and updates the counter.
	 * @method
	 */
	this.update = function () {
		pb.bar1.value++;
		pb.bar2.maxvalue = 0;
		pb.bar2.visible = false;
		pb.text = title;
		if (maxWidth) pb.text += ' \u2013 ' + pb.bar1.value + '/' + pb.bar1.maxvalue;
		updatePB();
	};
	/**
	 * Sets the number of steps for the secondary progress bar.
	 * @method
	 * @param {number} maxValue2 - Number of steps.
	 */
	this.init2 = function (maxValue2) {
		pb.bar2.value = 0;
		pb.bar2.maxvalue = maxValue2 > 1 ? maxValue2 : 0;
		pb.bar2.visible = (pb.bar2.maxvalue > 1);
		updatePB();
	};
	/**
	 * Increases the value of the secondary progress bar.
	 * @method
	 */
	this.update2 = function () {
		if (pb.bar2.maxvalue < 2) return;
		pb.bar2.visible = true;
		pb.bar2.value++;
		updatePB();
	};
	/**
	 * Closes the progress bar.
	 * @method
	 */
	this.close = function () { $.sleep(100); pb.close(); };

	// Show/update/center in window
	function updatePB() {
		if (!pb.visible) pb.show();
		if (app.windows.length > 0) {
			pb.frameLocation = [
				(app.activeWindow.bounds[1] + app.activeWindow.bounds[3] - pb.frameSize.width) / 2,
				(app.activeWindow.bounds[0] + app.activeWindow.bounds[2] - pb.frameSize.height) / 2
			];
		}
		pb.update();
	}
}
