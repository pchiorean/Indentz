/**
 * Replaces a link or a list of links with a different one. A selection limits the scope.
 * @version 22.2.10
 * @author Paul Chiorean <jpeg@basement.ro>
 * @license MIT
 * @param {(string|string[])} oldLinks - A link name, or an array of link names to be replaced.
 * @param {string} newLink - New link name (if same folder), or full link path.
 * @returns {boolean} - Returns `true` if a replacement was made, `false` if not.
 * @example
 * replaceLink('link1.jpg', 'link1.psd'); // Both links are in the same folder
 * replaceLink('link1.jpg', 'path/to/link1.psd');
 * replaceLink([ 'link1.jpg', 'link1.png' ], 'link1.psd');
 */
function replaceLink(oldLinks, newLink) {
	var link;
	var links = doc.links.everyItem().getElements();
	var selection = doc.selection;
	var isFound = false;
	// Check if document has at least one of oldLinks
	if (oldLinks.constructor.name !== 'Array') oldLinks = Array(oldLinks);
	for (var i = 0, n = oldLinks.length; i < n; i++)
		if (isInArray(oldLinks[i], links)) { isFound = true; break; }
	if (!isFound) return false;
	// Check if newLink is valid
	newLink = /\//g.test(newLink) ? newLink : doc.filePath + '/Links/' + newLink;
	if (!File(newLink).exists) {
		errors.push("Link '" + newLink + "' not found.");
		return false;
	}
	// Relink
	while ((link = links.shift())) {
		if (selection.length > 0 && !isInArray(link.parent.parent, selection)) continue; // Skip not selected
		else if (!isInArray(link.name, oldLinks)) continue;                              // Skip not matched
		if (File(link.filePath).fullName === File(newLink).fullName) continue;           // Skip self
		link.relink(File(newLink));
	}
	return true;

	function isInArray(item, array) {
		for (var i = 0, n = array.length; i < n; i++) {
			if (item.constructor.name === 'String') {
				if ((array[i].constructor.name === 'Link' ? array[i].name : array[i])
					.lastIndexOf(item) !== -1) return true;
			} else if (item === array[i]) { return true; }
		}
		return false;
	}
}
